{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 18,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{{read_db}}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicTriggerPathList": [
    {
      "key": "onResetClick"
    }
  ],
  "events": [
    "onResetClick"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "e852he5u21",
  "leftColumn": 0,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 37,
  "mobileLeftColumn": 1,
  "mobileRightColumn": 24,
  "mobileTopRow": 7,
  "needsErrorInfo": false,
  "onResetClick": "{{showAlert('Successfully reset!!', '');}}",
  "originalBottomRow": 38,
  "originalTopRow": 6,
  "parentColumnSpace": 6.9375,
  "parentId": "dxdpuobdai",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 50,
  "srcDoc": {
    "css": "/* General container styling */\n#root {\n  font-family: Arial, sans-serif;\n  padding: 20px;\n}\n\n/* Filter container */\nh2 {\n  color: #333;\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n.filter-container {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  margin-bottom: 10px;\n}\n\n/* Select dropdowns */\nselect {\n  padding: 5px;\n  font-size: 14px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\n/* Input field */\ninput[type=\"text\"],\ninput[type=\"number\"] {\n  padding: 5px;\n  font-size: 14px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  width: 150px;\n}\n\n/* Buttons */\nbutton {\n  padding: 5px 10px;\n  font-size: 14px;\n  cursor: pointer;\n  border: 1px solid #007BFF\n",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "import React from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\nimport { Button, Card } from 'https://cdn.jsdelivr.net/npm/antd@5.11.1/+esm';\nimport Markdown from 'https://cdn.jsdelivr.net/npm/react-markdown@9.0.1/+esm';\nconst {\n  useEffect\n} = React;\nconst {\n  useState\n} = React;\n\n// Operators for filtering\nconst textOperators = [\"contains\", \"<\", \"<=\", \">\", \">=\", \"=\"];\nconst numericOperators = [\"<\", \"<=\", \">\", \">=\", \"=\"];\nconst App = () => {\n  const [filters, setFilters] = useState([{\n    column: \"\",\n    operator: \"\",\n    value: \"\"\n  }]);\n  useEffect(() => {\n    // Apply filtering to the data whenever filters change\n    const filteredData = appsmith.model.data?.filter(item => {\n      return filters.every(filter => {\n        const {\n          column,\n          operator,\n          value\n        } = filter;\n        if (!column || !operator || value === \"\") return true; // Skip incomplete filters\n\n        const itemValue = item[column];\n        if (typeof itemValue === \"string\") {\n          if (operator === \"contains\") return itemValue.toLowerCase().includes(value.toLowerCase());\n        } else if (typeof itemValue === \"number\" && column !== \"id\") {\n          const numericValue = parseFloat(value);\n          if (operator === \"<\") return itemValue < numericValue;\n          if (operator === \"<=\") return itemValue <= numericValue;\n          if (operator === \">\") return itemValue > numericValue;\n          if (operator === \">=\") return itemValue >= numericValue;\n          if (operator === \"=\") return itemValue === numericValue;\n          if (operator === \"equals\") return itemValue === value;\n        } else if (column === \"id\") {\n          const numericValue = parseInt(value);\n          if (operator === \"<\") return itemValue < numericValue;\n          if (operator === \"<=\") return itemValue <= numericValue;\n          if (operator === \">\") return itemValue > numericValue;\n          if (operator === \">=\") return itemValue >= numericValue;\n          if (operator === \"=\") return itemValue === numericValue;\n        }\n        return true; // Default to true if no match\n      });\n    });\n\n    // Update filtered data\n    appsmith.updateModel({\n      data: filteredData\n    });\n  }, [filters]); // Re-run the filter whenever the filters change\n\n  // Update filters\n  const handleFilterChange = (index, key, value) => {\n    const updatedFilters = [...filters];\n    updatedFilters[index][key] = value;\n    setFilters(updatedFilters);\n  };\n\n  // Add new filter\n  const addFilter = () => {\n    setFilters([...filters, {\n      column: \"\",\n      operator: \"\",\n      value: \"\"\n    }]);\n    appsmith.triggerEvent(\"onClick\");\n  };\n\n  // Delete a filter\n  const deleteFilter = index => {\n    const updatedFilters = filters.filter((_, i) => i !== index);\n    setFilters(updatedFilters);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", null, filters.map((filter, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    style: {\n      marginBottom: \"10px\"\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    value: filter.column,\n    onChange: e => handleFilterChange(index, \"column\", e.target.value)\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\"\n  }, \"Select Column\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"id\"\n  }, \"id\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"genres\"\n  }, \"genres\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"vote_average\"\n  }, \"vote_average\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"title\"\n  }, \"title\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"popularity\"\n  }, \"popularity\")), /*#__PURE__*/React.createElement(\"select\", {\n    value: filter.operator,\n    onChange: e => handleFilterChange(index, \"operator\", e.target.value),\n    disabled: !filter.column\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\"\n  }, \"Select Operator\"), filter.column && (filter.column === \"price\" ? numericOperators : textOperators).map(op => /*#__PURE__*/React.createElement(\"option\", {\n    key: op,\n    value: op\n  }, op))), /*#__PURE__*/React.createElement(\"input\", {\n    type: filter.column === \"price\" ? \"number\" : \"text\",\n    value: filter.value,\n    onChange: e => handleFilterChange(index, \"value\", e.target.value),\n    disabled: !filter.column || !filter.operator\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => deleteFilter(index),\n    style: {\n      marginLeft: \"10px\"\n    }\n  }, \"Delete\"))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addFilter\n  }, \"Add Filter\"));\n};\nexport default App;\nappsmith.onReady(() => {\n  reactDom.render( /*#__PURE__*/React.createElement(App, null), document.getElementById(\"root\"));\n});"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 0,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": "/* General container styling */\n#root {\n  font-family: Arial, sans-serif;\n  padding: 20px;\n}\n\n/* Filter container */\nh2 {\n  color: #333;\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n.filter-container {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  margin-bottom: 10px;\n}\n\n/* Select dropdowns */\nselect {\n  padding: 5px;\n  font-size: 14px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\n/* Input field */\ninput[type=\"text\"],\ninput[type=\"number\"] {\n  padding: 5px;\n  font-size: 14px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  width: 150px;\n}\n\n/* Buttons */\nbutton {\n  padding: 5px 10px;\n  font-size: 14px;\n  cursor: pointer;\n  border: 1px solid #007BFF\n",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "import React from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\nimport { Button, Card } from 'https://cdn.jsdelivr.net/npm/antd@5.11.1/+esm';\nimport Markdown from 'https://cdn.jsdelivr.net/npm/react-markdown@9.0.1/+esm';\nconst { useEffect } = React;\nconst { useState } = React;\n\n// Operators for filtering\nconst textOperators = [\"contains\", \"<\", \"<=\", \">\", \">=\", \"=\"];\nconst numericOperators = [\"<\", \"<=\", \">\", \">=\", \"=\"];\n\n\n\nconst App = () => {\n  const [filters, setFilters] = useState([{ column: \"\", operator: \"\", value: \"\" }]);\n\n  useEffect(() => {\n    // Apply filtering to the data whenever filters change\n    const filteredData = appsmith.model.data?.filter((item) => {\n      return filters.every((filter) => {\n        const { column, operator, value } = filter;\n        if (!column || !operator || value === \"\") return true; // Skip incomplete filters\n\t\t\t\t\n        const itemValue = item[column];\n\n        if (typeof itemValue === \"string\") {\n          if (operator === \"contains\") return itemValue.toLowerCase().includes(value.toLowerCase());\n\n        } else if (typeof itemValue === \"number\" && column !== \"id\") {\n          const numericValue = parseFloat(value);\n          if (operator === \"<\") return itemValue < numericValue;\n          if (operator === \"<=\") return itemValue <= numericValue;\n          if (operator === \">\") return itemValue > numericValue;\n          if (operator === \">=\") return itemValue >= numericValue;\n          if (operator === \"=\") return itemValue === numericValue;\n          if (operator === \"equals\") return itemValue === value;\n        } else if (column === \"id\") {\n          const numericValue = parseInt(value);\n          if (operator === \"<\") return itemValue < numericValue;\n          if (operator === \"<=\") return itemValue <= numericValue;\n          if (operator === \">\") return itemValue > numericValue;\n          if (operator === \">=\") return itemValue >= numericValue;\n          if (operator === \"=\") return itemValue === numericValue;\n        }\n        return true; // Default to true if no match\n      });\n    });\n\n    // Update filtered data\n    appsmith.updateModel({ data: filteredData });\n  }, [filters]); // Re-run the filter whenever the filters change\n\n  // Update filters\n  const handleFilterChange = (index, key, value) => {\n    const updatedFilters = [...filters];\n    updatedFilters[index][key] = value;\n    setFilters(updatedFilters);\n  };\n\n  // Add new filter\n  const addFilter = () => {\n    setFilters([...filters, { column: \"\", operator: \"\", value: \"\" }]);\n    appsmith.triggerEvent(\"onClick\");\n  };\n\n  // Delete a filter\n  const deleteFilter = (index) => {\n    const updatedFilters = filters.filter((_, i) => i !== index);\n    setFilters(updatedFilters);\n  };\n\n  return (\n    <div>\n      {filters.map((filter, index) => (\n        <div key={index} style={{ marginBottom: \"10px\" }}>\n          <select\n            value={filter.column}\n            onChange={(e) => handleFilterChange(index, \"column\", e.target.value)}\n          >\n            <option value=\"\">Select Column</option>\n            <option value=\"id\">id</option>\n            <option value=\"genres\">genres</option>\n            <option value=\"vote_average\">vote_average</option>\n\t\t\t\t\t\t<option value=\"title\">title</option>\n\t          <option value=\"popularity\">popularity</option>\n          </select>\n\n          <select\n            value={filter.operator}\n            onChange={(e) => handleFilterChange(index, \"operator\", e.target.value)}\n            disabled={!filter.column}\n          >\n            <option value=\"\">Select Operator</option>\n            {filter.column && (filter.column === \"price\" ? numericOperators : textOperators).map((op) => (\n              <option key={op} value={op}>\n                {op}\n              </option>\n            ))}\n          </select>\n\n          <input\n            type={filter.column === \"price\" ? \"number\" : \"text\"}\n            value={filter.value}\n            onChange={(e) => handleFilterChange(index, \"value\", e.target.value)}\n            disabled={!filter.column || !filter.operator}\n          />\n\n          {/* Delete Filter Button */}\n          <button onClick={() => deleteFilter(index)} style={{ marginLeft: \"10px\" }}>\n            Delete\n          </button>\n        </div>\n      ))}\n\n      <button onClick={addFilter}>Add Filter</button>\n    </div>\n  );\n};\n\nexport default App;\n\nappsmith.onReady(() => {\n  reactDom.render(<App />, document.getElementById(\"root\"));\n});\n"
  },
  "version": 1,
  "widgetId": "d9dzavct40",
  "widgetName": "Custom1"
}