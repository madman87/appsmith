{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 18,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{{read_db}}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicTriggerPathList": [
    {
      "key": "onResetClick"
    }
  ],
  "events": [],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "e852he5u21",
  "leftColumn": 0,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 37,
  "mobileLeftColumn": 1,
  "mobileRightColumn": 24,
  "mobileTopRow": 7,
  "needsErrorInfo": false,
  "onResetClick": "{{showAlert('Successfully reset!!', '');}}",
  "originalBottomRow": 38,
  "originalTopRow": 6,
  "parentColumnSpace": 6.9375,
  "parentId": "dxdpuobdai",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 50,
  "srcDoc": {
    "css": "/* General App Styling */\n.App {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\nh1 {\n  font-size: 2.5em;\n  margin-bottom: 20px;\n  color: #333;\n}\n\n/* Buttons */\nbutton {\n  background-color: #007bff;\n  color: white;\n  padding: 5px 10px;\n  border: none;\n  border-radius: 4px;\n  font-size: 1em;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n  margin-right: 10px;\n}\n\nbutton:hover {\n  background-color: #0056b3;\n}\n\n/* Filters Container */\n.filters-container {\n  padding: 15px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n}\n\n.filters-list {\n  margin-bottom: 15px;\n}\n\n.filter-item {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.filter-item select, .filter-item input {\n  margin-right: 10px;\n  padding: 8px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n}\n\n.filter-item button {\n  background-color: #dc3545;\n  padding: 5px 10px;\n}\n\n.filter-item button:hover {\n  background-color: #c82333;\n}\n\n.matching-count p {\n  font-weight: bold;\n  margin: 0;\n}\n\n/* Dropzone */\n.dropzone {\n  border: 2px dashed #ccc;\n  padding: 40px;\n  text-align: center;\n  margin-bottom: 20px;\n  background-color: #fff;\n  border-radius: 8px;\n  transition: border-color 0.3s ease;\n}\n\n.dropzone.dragging {\n  border-color: #007bff;\n}\n\n.dropzone p {\n  margin: 0;\n  font-size: 1.1em;\n}\n\n.dropzone label {\n  color: #007bff;\n  font-weight: bold;\n}\n\n/* Table */\ntable {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 20px;\n  background-color: #fff;\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\nth, td {\n  padding: 12px 15px;\n  border: 1px solid #ddd;\n  text-align: left;\n  font-size: 1em;\n}\n\nth {\n  background-color: #007bff;\n  color: white;\n  cursor: pointer;\n  position: relative;\n}\n\nth:hover {\n  background-color: #0056b3;\n}\n\nth::after {\n  content: \"\";\n  position: absolute;\n  right: 10px;\n  width: 0;\n  height: 0;\n  border-left: 5px solid transparent;\n  border-right: 5px solid transparent;\n  border-bottom: 5px solid white;\n  transform: translateY(-50%);\n  top: 50%;\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\nth.asc::after {\n  opacity: 1;\n}\n\nth.desc::after {\n  border-bottom: none;\n  border-top: 5px solid white;\n  opacity: 1;\n}\n\ntd {\n  background-color: #f9f9f9;\n}\n\ntr:nth-child(even) td {\n  background-color: #f1f1f1;\n}\n\ntr:hover td {\n  background-color: #e9ecef;\n}\n\n/* File Input */\n#fileInput {\n  display: none;\n}\n\nlabel[for=fileInput] {\n  cursor: pointer;\n  font-size: 1.1em;\n}\n\n#sqlinput {\n  height: 30px;\n  width: 500px;\n  margin: 5px;\n}",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "import React from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\nconst {\n  useState\n} = React;\nconst numericOperators = [\"=\", \"<\", \"<=\", \">\", \">=\"];\nconst textOperators = [\"contains\", \"=\"];\nconst App = () => {\n  const [filters, setFilters] = useState([{\n    column: \"\",\n    operator: \"\",\n    value: \"\",\n    logic: \"AND\"\n  }]);\n  const [matchingCount, setMatchingCount] = useState(0);\n\n  // Function to apply filters\n  const applyFilters = () => {\n    const newFilteredData = appsmith.model.data?.filter(item => {\n      return filters.reduce((acc, filter, index) => {\n        const {\n          column,\n          operator,\n          value,\n          logic\n        } = filter;\n        if (!column || !operator || value === \"\") return acc;\n        const itemValue = item[column];\n        if (typeof itemValue === 'undefined') {\n          console.log(\"Avoid scanning undefined cells\");\n          return false;\n        }\n        let match = false;\n        if (typeof itemValue === \"string\" && column !== \"vote_average\" && column !== \"release_date\") {\n          match = operator === \"contains\" ? itemValue.toLowerCase().includes(value.toLowerCase()) : operator === \"=\" && itemValue.toLowerCase() === value.toLowerCase();\n        } else if (column === \"vote_average\" || column === \"popularity\" || column === \"id\" || column === \"vote_count\") {\n          const numericValue = parseFloat(value);\n          switch (operator) {\n            case \"<\":\n              match = itemValue < numericValue;\n              break;\n            case \"<=\":\n              match = itemValue <= numericValue;\n              break;\n            case \">\":\n              match = itemValue > numericValue;\n              break;\n            case \">=\":\n              match = itemValue >= numericValue;\n              break;\n            case \"=\":\n              match = itemValue === numericValue;\n              break;\n            default:\n              match = true;\n          }\n        } else if (column === \"release_date\") {\n          // Parse dates\n          const dateValue = new Date(value);\n          const itemDate = new Date(itemValue);\n\n          // Check if both dates are valid\n          const isValidDateValue = !isNaN(dateValue.getTime());\n          const isValidItemDate = !isNaN(itemDate.getTime());\n          if (isValidDateValue && isValidItemDate) {\n            // Both dates are valid\n            const dateValueTimestamp = dateValue.getTime();\n            const itemDateTimestamp = itemDate.getTime();\n\n            // console.log(`dateValue ${dateValue} itemDate ${itemDate}`);\n\n            switch (operator) {\n              case \"<\":\n                match = itemDateTimestamp < dateValueTimestamp;\n                break;\n              case \"<=\":\n                match = itemDateTimestamp <= dateValueTimestamp;\n                break;\n              case \">\":\n                match = itemDateTimestamp > dateValueTimestamp;\n                break;\n              case \">=\":\n                match = itemDateTimestamp >= dateValueTimestamp;\n                break;\n              case \"=\":\n                match = itemDateTimestamp === dateValueTimestamp;\n                break;\n              default:\n                match = true;\n            }\n          } else {\n            // Handle invalid date case\n            if (!isValidDateValue) {\n              console.error(\"Invalid dateValue:\", value);\n            }\n            if (!isValidItemDate) {\n              console.error(\"Invalid itemValue:\", itemValue);\n            }\n          }\n        }\n        if (index === 0) return match;\n        return logic === \"AND\" ? acc && match : acc || match;\n      }, true);\n    });\n    setMatchingCount(newFilteredData.length);\n\n    // Update the filtered data and count of matching rows\n    appsmith.updateModel({\n      filteredata: newFilteredData\n    });\n    // appsmith.triggerEvent(\"onClick\");\n  };\n  const handleFilterChange = (index, key, value) => {\n    const updatedFilters = [...filters];\n    updatedFilters[index][key] = value;\n    setFilters(updatedFilters);\n    if (key === \"value\" || key === \"operator\") {\n      applyFilters(); //update modal only when value was provided\n    }\n  };\n  const addFilter = () => {\n    setFilters([...filters, {\n      column: \"\",\n      operator: \"\",\n      value: \"\",\n      logic: \"AND\"\n    }]);\n  };\n  const deleteFilter = index => {\n    const updatedFilters = filters.filter((_, i) => i !== index);\n    setFilters(updatedFilters);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filters-container\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filters-list\"\n  }, filters.map((filter, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    className: \"filter-item\"\n  }, index > 0 && /*#__PURE__*/React.createElement(\"select\", {\n    value: filter.logic,\n    onChange: e => handleFilterChange(index, \"logic\", e.target.value)\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"AND\"\n  }, \"AND\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"OR\"\n  }, \"OR\")), /*#__PURE__*/React.createElement(\"select\", {\n    value: filter.column,\n    onChange: e => handleFilterChange(index, \"column\", e.target.value)\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\"\n  }, \"Select Column\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"id\"\n  }, \"id\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"title\"\n  }, \"title\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"genres\"\n  }, \"genres\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"vote_count\"\n  }, \"vote_count\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"vote_average\"\n  }, \"vote_average\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"popularity\"\n  }, \"popularity\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"keywords\"\n  }, \"keywords\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"overview\"\n  }, \"overview\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"release_date\"\n  }, \"release_date\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"spoken_languages\"\n  }, \"spoken_languages\")), /*#__PURE__*/React.createElement(\"select\", {\n    value: filter.operator,\n    onChange: e => handleFilterChange(index, \"operator\", e.target.value),\n    disabled: !filter.column\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\"\n  }, \"Select Operator\"), (filter.column === \"vote_average\" || filter.column === \"popularity\" || filter.column === \"id\" || filter.column === \"vote_count\" || filter.column === \"release_date\" ? numericOperators : textOperators).map(op => /*#__PURE__*/React.createElement(\"option\", {\n    key: op,\n    value: op\n  }, op))), filter.column === \"release_date\" ? /*#__PURE__*/React.createElement(\"input\", {\n    type: \"date\",\n    value: filter.value,\n    onChange: e => handleFilterChange(index, \"value\", e.target.value),\n    disabled: !filter.column || !filter.operator\n  }) : /*#__PURE__*/React.createElement(\"input\", {\n    type: filter.column === \"vote_average\" || filter.column === \"popularity\" || filter.column === \"id\" || filter.column === \"vote_count\" ? \"number\" : \"text\",\n    value: filter.value,\n    onChange: e => handleFilterChange(index, \"value\", e.target.value),\n    disabled: !filter.column || !filter.operator\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => deleteFilter(index)\n  }, \"Delete\"))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addFilter\n  }, \"Add Filter\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"matching-count\"\n  }, /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Matching Rows:\"), \" \", matchingCount)));\n};\nexport default App;\nappsmith.onReady(() => {\n  reactDom.render( /*#__PURE__*/React.createElement(App, null), document.getElementById(\"root\"));\n});"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 0,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": "/* General App Styling */\n\n\n.App {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\nh1 {\n  font-size: 2.5em;\n  margin-bottom: 20px;\n  color: #333;\n}\n\n/* Buttons */\nbutton {\n  background-color: #007bff;\n  color: white;\n  padding: 5px 10px;\n  border: none;\n  border-radius: 4px;\n  font-size: 1em;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n  margin-right: 10px;\n}\n\nbutton:hover {\n  background-color: #0056b3;\n}\n\n/* Filters Container */\n.filters-container {\n  padding: 15px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n}\n\n.filters-list {\n  margin-bottom: 15px;\n}\n\n.filter-item {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.filter-item select, .filter-item input {\n  margin-right: 10px;\n  padding: 8px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n}\n\n.filter-item button {\n  background-color: #dc3545;\n  padding: 5px 10px;\n}\n\n.filter-item button:hover {\n  background-color: #c82333;\n}\n\n.matching-count p {\n  font-weight: bold;\n  margin: 0;\n}\n\n/* Dropzone */\n.dropzone {\n  border: 2px dashed #ccc;\n  padding: 40px;\n  text-align: center;\n  margin-bottom: 20px;\n  background-color: #fff;\n  border-radius: 8px;\n  transition: border-color 0.3s ease;\n}\n\n.dropzone.dragging {\n  border-color: #007bff;\n}\n\n.dropzone p {\n  margin: 0;\n  font-size: 1.1em;\n}\n\n.dropzone label {\n  color: #007bff;\n  font-weight: bold;\n}\n\n/* Table */\ntable {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 20px;\n  background-color: #fff;\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\nth, td {\n  padding: 12px 15px;\n  border: 1px solid #ddd;\n  text-align: left;\n  font-size: 1em;\n}\n\nth {\n  background-color: #007bff;\n  color: white;\n  cursor: pointer;\n  position: relative;\n}\n\nth:hover {\n  background-color: #0056b3;\n}\n\nth::after {\n  content: '';\n  position: absolute;\n  right: 10px;\n  width: 0;\n  height: 0;\n  border-left: 5px solid transparent;\n  border-right: 5px solid transparent;\n  border-bottom: 5px solid white;\n  transform: translateY(-50%);\n  top: 50%;\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\nth.asc::after {\n  opacity: 1;\n}\n\nth.desc::after {\n  border-bottom: none;\n  border-top: 5px solid white;\n  opacity: 1;\n}\n\ntd {\n  background-color: #f9f9f9;\n}\n\ntr:nth-child(even) td {\n  background-color: #f1f1f1;\n}\n\ntr:hover td {\n  background-color: #e9ecef;\n}\n\n/* File Input */\n#fileInput {\n  display: none;\n}\n\nlabel[for=\"fileInput\"] {\n  cursor: pointer;\n  font-size: 1.1em;\n}\n\n#sqlinput{\n  height: 30px;\n  width: 500px;\n  margin: 5px;\n}\n",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "\nimport React from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\nconst { useState } = React;\n\nconst numericOperators = [\"=\", \"<\", \"<=\", \">\", \">=\"];\nconst textOperators = [\"contains\", \"=\"];\n\n\nconst App = () => {\n\tconst [filters, setFilters] = useState([{ column: \"\", operator: \"\", value: \"\", logic: \"AND\" }]);\n\tconst [matchingCount, setMatchingCount] = useState(0);\n\n\t// Function to apply filters\n\tconst applyFilters = () => {\n\n\t\tconst newFilteredData = appsmith.model.data?.filter((item) => {\n\t\t\treturn filters.reduce((acc, filter, index) => {\n\t\t\t\tconst { column, operator, value, logic } = filter;\n\t\t\t\tif (!column || !operator || value === \"\") return acc;\n\n\t\t\t\tconst itemValue = item[column];\n\n\t\t\t\tif (typeof itemValue === 'undefined') {\n\t\t\t\t\tconsole.log(\"Avoid scanning undefined cells\");\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tlet match = false;\n\n\t\t\t\tif (typeof itemValue === \"string\" && column !== \"vote_average\" && column !== \"release_date\") {\n\t\t\t\t\tmatch = operator === \"contains\"\n\t\t\t\t\t\t? itemValue.toLowerCase().includes(value.toLowerCase())\n\t\t\t\t\t: operator === \"=\" && itemValue.toLowerCase() === value.toLowerCase();\n\t\t\t\t} else if (column === \"vote_average\" || column === \"popularity\" || column === \"id\" || column === \"vote_count\") {\n\t\t\t\t\tconst numericValue = parseFloat(value);\n\t\t\t\t\tswitch (operator) {\n\t\t\t\t\t\tcase \"<\":\n\t\t\t\t\t\t\tmatch = itemValue < numericValue;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"<=\":\n\t\t\t\t\t\t\tmatch = itemValue <= numericValue;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \">\":\n\t\t\t\t\t\t\tmatch = itemValue > numericValue;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \">=\":\n\t\t\t\t\t\t\tmatch = itemValue >= numericValue;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"=\":\n\t\t\t\t\t\t\tmatch = itemValue === numericValue;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmatch = true;\n\t\t\t\t\t}\n\t\t\t\t} else if (column === \"release_date\") {\n\t\t\t\t\t// Parse dates\n\t\t\t\t\tconst dateValue = new Date(value);\n\t\t\t\t\tconst itemDate = new Date(itemValue);\n\n\t\t\t\t\t// Check if both dates are valid\n\t\t\t\t\tconst isValidDateValue = !isNaN(dateValue.getTime());\n\t\t\t\t\tconst isValidItemDate = !isNaN(itemDate.getTime());\n\n\t\t\t\t\tif (isValidDateValue && isValidItemDate) {\n\t\t\t\t\t\t// Both dates are valid\n\t\t\t\t\t\tconst dateValueTimestamp = dateValue.getTime();\n\t\t\t\t\t\tconst itemDateTimestamp = itemDate.getTime();\n\n\t\t\t\t\t\t// console.log(`dateValue ${dateValue} itemDate ${itemDate}`);\n\n\t\t\t\t\t\tswitch (operator) {\n\t\t\t\t\t\t\tcase \"<\":\n\t\t\t\t\t\t\t\tmatch = itemDateTimestamp < dateValueTimestamp;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"<=\":\n\t\t\t\t\t\t\t\tmatch = itemDateTimestamp <= dateValueTimestamp;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \">\":\n\t\t\t\t\t\t\t\tmatch = itemDateTimestamp > dateValueTimestamp;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \">=\":\n\t\t\t\t\t\t\t\tmatch = itemDateTimestamp >= dateValueTimestamp;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"=\":\n\t\t\t\t\t\t\t\tmatch = itemDateTimestamp === dateValueTimestamp;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tmatch = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Handle invalid date case\n\t\t\t\t\t\tif (!isValidDateValue) {\n\t\t\t\t\t\t\tconsole.error(\"Invalid dateValue:\", value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!isValidItemDate) {\n\t\t\t\t\t\t\tconsole.error(\"Invalid itemValue:\", itemValue);\n\t\t\t\t\t\t}\n\t\t\t\t\t}    \n\t\t\t\t}\n\n\t\t\t\tif (index === 0) return match;\n\n\t\t\t\treturn logic === \"AND\" ? acc && match : acc || match;\n\t\t\t}, true);\n\t\t});\n\n\t\tsetMatchingCount(newFilteredData.length);\n\n\t\t// Update the filtered data and count of matching rows\n\t\tappsmith.updateModel({ filteredata: newFilteredData });\n\t\t// appsmith.triggerEvent(\"onClick\");\n\t};\n\n\tconst handleFilterChange = (index, key, value) => {\n\t\tconst updatedFilters = [...filters];\n\t\tupdatedFilters[index][key] = value;\n\t\tsetFilters(updatedFilters);\n\n\t\tif(key===\"value\" || key===\"operator\"){\n\t\t\tapplyFilters(); //update modal only when value was provided\n\t\t}\n\t};\n\n\n\n\tconst addFilter = () => {\n\t\tsetFilters([...filters, { column: \"\", operator: \"\", value: \"\", logic: \"AND\" }]);\n\t};\n\n\tconst deleteFilter = (index) => {\n\t\tconst updatedFilters = filters.filter((_, i) => i !== index);\n\t\tsetFilters(updatedFilters);\n\t};\n\n\treturn (\n\t\t<div className=\"filters-container\">\n\t\t<div className=\"filters-list\">\n\t\t{filters.map((filter, index) => (\n\t\t<div key={index} className=\"filter-item\">\n\t\t{index > 0 && (\n\t\t <select\n\t\t value={filter.logic}\nonChange={(e) => handleFilterChange(index, \"logic\", e.target.value)}\n\t>\n\t\t<option value=\"AND\">AND</option>\n<option value=\"OR\">OR</option>\n</select>\n)}\n\n\t<select\nvalue={filter.column}\nonChange={(e) => handleFilterChange(index, \"column\", e.target.value)}\n\t>\n\t\t<option value=\"\">Select Column</option>\n<option value=\"id\">id</option>\n<option value=\"title\">title</option>\n<option value=\"genres\">genres</option>\n<option value=\"vote_count\">vote_count</option>\n<option value=\"vote_average\">vote_average</option>\n<option value=\"popularity\">popularity</option>\n<option value=\"keywords\">keywords</option>\n<option value=\"overview\">overview</option>\n<option value=\"release_date\">release_date</option>\n<option value=\"spoken_languages\">spoken_languages</option>\n</select>\n\n<select\nvalue={filter.operator}\nonChange={(e) => handleFilterChange(index, \"operator\", e.target.value)}\ndisabled={!filter.column}\n>\n\t<option value=\"\">Select Operator</option>\n{(filter.column === \"vote_average\" || filter.column === \"popularity\" || filter.column === \"id\" || filter.column === \"vote_count\" ||filter.column === \"release_date\"\n\t? numericOperators\n\t: textOperators\n ).map((op) => (\n\t<option key={op} value={op}>\n\t{op}\n</option>\n))}\n\t</select>\n\n{filter.column === \"release_date\" ? (\n\t<input\n\ttype=\"date\"\n\tvalue={filter.value}\nonChange={(e) => handleFilterChange(index, \"value\", e.target.value)}\ndisabled={!filter.column || !filter.operator}\n/>\n\t) : (\n\t\t<input\n\t\ttype={filter.column === \"vote_average\" || filter.column === \"popularity\" || filter.column === \"id\" || filter.column === \"vote_count\"  ? \"number\" : \"text\"}\n\tvalue={filter.value}\nonChange={(e) => handleFilterChange(index, \"value\", e.target.value)}\ndisabled={!filter.column || !filter.operator}\n/>\n\t)}\n\n\t\t<button onClick={() => deleteFilter(index)}>Delete</button>\n</div>\n))}\n\n\t<button onClick={addFilter}>Add Filter</button>\n</div>\n\n<div className=\"matching-count\">\n\t<p><strong>Matching Rows:</strong> {matchingCount}</p>\n\t\t</div>\n</div>\n);\n};\n\nexport default App;\n\nappsmith.onReady(() => {\n\treactDom.render(<App />, document.getElementById(\"root\"));\n});"
  },
  "version": 1,
  "widgetId": "d9dzavct40",
  "widgetName": "Custom1"
}